generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Post {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  content  String // string or url
  user     User      @relation("Posts", fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String
  likes    User[]    @relation("LikedPosts")
  comments Comment[] @relation("Comments")
}

model Comment {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  content String // string or url
  post    Post   @relation("Comments", fields: [post_id], references: [id], onDelete: Cascade)
  post_id String

  user    User   @relation("Comments", fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  likes   User[] @relation("LikedComments")

  // comment to comment relation
  parentComment   Comment?  @relation("CommentParentsComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentParentsComment")
}

enum NotificationType {
  RECEIVED_REQUEST
  REQUEST_ACCEPTED
  POST_LIKED
  COMMENT_LIKED
  COMMENT_REPLY
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  content String

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bio String?

  // posts
  posts       Post[] @relation("Posts")
  liked_posts Post[] @relation("LikedPosts")

  // comments
  comments       Comment[] @relation("Comments")
  liked_comments Comment[] @relation("LikedComments")

  // notifications
  notifications Notification[]

  // received requests
  sent_requests     User[] @relation("Requests")
  received_requests User[] @relation("Requests")

  // friends
  friends    User[] @relation("Friends")
  friends_of User[] @relation("Friends")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
